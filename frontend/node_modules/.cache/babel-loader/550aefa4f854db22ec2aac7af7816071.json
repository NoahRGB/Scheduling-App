{"ast":null,"code":"var _jsxFileName = \"/Users/noahcox/Code/React/Scheduling-App/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext, useContext } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport BlockContainer from \"./BlockContainer\";\nimport Header from \"./Header\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\nimport Homepage from \"./Homepage\";\nimport { LoginContext } from \"./Context\";\nimport \"./style.css\";\nimport Calendar from \"./Calendar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentDateInfo, setCurrentDateInfo] = useState({});\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userLoggedIn, setUserLoggedIn] = useState(\"\");\n  const ctx = useContext(LoginContext);\n  const monthStringConversions = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const monthDayConversions = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  const populateDateInfo = async () => {\n    //sets date info state (for header)\n    const now = new Date();\n    const day = now.getDate();\n    const month = now.getMonth();\n    const year = now.getFullYear();\n    setCurrentDateInfo({\n      day,\n      month: monthStringConversions[month],\n      year\n    }); //sets date block state (for calendar display)\n\n    if (userLoggedIn != \"\") {\n      let newDateBlocks = [];\n\n      for (let i = 1; i <= monthDayConversions[month]; i++) {\n        const fullDate = `${i}/${month + 1}/${year}`;\n        let activities = await fetchActivities(fullDate);\n        newDateBlocks.push({\n          id: i,\n          date: fullDate,\n          activities,\n          isToday: i === day\n        });\n      }\n\n      setBlocks([...blocks, ...newDateBlocks]);\n    }\n  };\n\n  const fetchActivities = async date => {\n    let response = await fetch(\"http://localhost:8000/getactivities\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        date,\n        username: userLoggedIn\n      })\n    });\n    let data = await response.json();\n    return data;\n  };\n\n  useEffect(() => {\n    populateDateInfo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(LoginContext.Provider, {\n        value: {\n          setIsAuthenticated,\n          setUserLoggedIn\n        },\n        children: [/*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/register\",\n            children: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/login\",\n            children: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            children: /*#__PURE__*/_jsxDEV(Homepage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/calendar\",\n          children: /*#__PURE__*/_jsxDEV(Calendar, {\n            todayInfo: currentDateInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CA/AJMMytvxfU24NDkatnfng42o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/noahcox/Code/React/Scheduling-App/frontend/src/App.js"],"names":["React","useState","useEffect","createContext","useContext","BrowserRouter","Route","Switch","BlockContainer","Header","Login","Register","Homepage","LoginContext","Calendar","App","currentDateInfo","setCurrentDateInfo","isAuthenticated","setIsAuthenticated","userLoggedIn","setUserLoggedIn","ctx","monthStringConversions","monthDayConversions","populateDateInfo","now","Date","day","getDate","month","getMonth","year","getFullYear","newDateBlocks","i","fullDate","activities","fetchActivities","push","id","date","isToday","setBlocks","blocks","response","fetch","method","mode","headers","body","JSON","stringify","username","data","json"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, createContext, useContext } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\n\nimport BlockContainer from \"./BlockContainer\";\nimport Header from \"./Header\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\nimport Homepage from \"./Homepage\";\nimport { LoginContext } from \"./Context\";\nimport \"./style.css\";\nimport Calendar from \"./Calendar\";\n\nfunction App() {\n  const [currentDateInfo, setCurrentDateInfo] = useState({});\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userLoggedIn, setUserLoggedIn] = useState(\"\");\n\n  const ctx = useContext(LoginContext);\n\n  const monthStringConversions = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const monthDayConversions = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  const populateDateInfo = async () => {\n    //sets date info state (for header)\n    const now = new Date();\n    const day = now.getDate();\n    const month = now.getMonth();\n    const year = now.getFullYear();\n    setCurrentDateInfo({day, month:monthStringConversions[month], year});\n    //sets date block state (for calendar display)\n    if (userLoggedIn != \"\") {\n      let newDateBlocks = [];\n      for (let i = 1; i <= monthDayConversions[month]; i++) {\n        const fullDate = `${i}/${month+1}/${year}`;\n        let activities = await fetchActivities(fullDate);\n        newDateBlocks.push({\n          id: i,\n          date: fullDate,\n          activities,\n          isToday: i === day\n        });\n      }\n      setBlocks([...blocks, ...newDateBlocks]);\n    }\n  }\n\n  const fetchActivities = async date => {\n    let response = await fetch(\"http://localhost:8000/getactivities\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ date, username:userLoggedIn })\n    });\n    let data = await response.json();\n    return data;\n  }\n\n  useEffect(() => {\n    populateDateInfo();\n  }, []);\n\n  return (\n    <div className=\"App\">    \n      <BrowserRouter>\n        <LoginContext.Provider value={{setIsAuthenticated, setUserLoggedIn}}>\n          <Switch>\n            <Route exact path=\"/register\">\n              <Register/>\n            </Route>\n            <Route exact path=\"/login\">\n              <Login/>\n            </Route>\n            <Route exact path=\"/\">\n              <Homepage/>\n            </Route>\n          </Switch>\n          <Route exact path=\"/calendar\">\n            <Calendar todayInfo={currentDateInfo}/>\n          </Route>\n        </LoginContext.Provider>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}