{"ast":null,"code":"var _jsxFileName = \"/Users/noahcox/Code/React/Scheduling-App/frontend/src/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport { Header } from \"./Header\";\nimport { BlockContainer } from \"./BlockContainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Calendar = ({\n  todayInfo\n}) => {\n  _s();\n\n  const [blocks, setBlocks] = useState([]);\n  const monthStringConversions = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const monthDayConversions = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  const populateDateInfo = async () => {\n    //sets date info state (for header)\n    const now = new Date();\n    const day = now.getDate();\n    const month = now.getMonth();\n    const year = now.getFullYear();\n    setCurrentDateInfo({\n      day,\n      month: monthStringConversions[month],\n      year\n    }); //sets date block state (for calendar display)\n\n    if (userLoggedIn != \"\") {\n      let newDateBlocks = [];\n\n      for (let i = 1; i <= monthDayConversions[month]; i++) {\n        const fullDate = `${i}/${month + 1}/${year}`;\n        let activities = await fetchActivities(fullDate);\n        newDateBlocks.push({\n          id: i,\n          date: fullDate,\n          activities,\n          isToday: i === day\n        });\n      }\n\n      setBlocks([...blocks, ...newDateBlocks]);\n    }\n  };\n\n  const fetchActivities = async date => {\n    let response = await fetch(\"http://localhost:8000/getactivities\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        date,\n        username: userLoggedIn\n      })\n    });\n    let data = await response.json();\n    return data;\n  };\n\n  useEffect(() => {\n    populateDateInfo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      todayInfo: todayInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BlockContainer, {\n      blocks: blocks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Calendar, \"EnmQnMllSQUThE3/m+b9p1neh+g=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/noahcox/Code/React/Scheduling-App/frontend/src/Calendar.js"],"names":["Header","BlockContainer","React","useState","useEffect","Calendar","todayInfo","blocks","setBlocks","monthStringConversions","monthDayConversions","populateDateInfo","now","Date","day","getDate","month","getMonth","year","getFullYear","setCurrentDateInfo","userLoggedIn","newDateBlocks","i","fullDate","activities","fetchActivities","push","id","date","isToday","response","fetch","method","mode","headers","body","JSON","stringify","username","data","json"],"mappings":"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","sourcesContent":["import { Header } from \"./Header\";\nimport { BlockContainer } from \"./BlockContainer\";\nimport React, { useState, useEffect } from \"react\";\n\n\nconst Calendar = ({ todayInfo }) => {\n    const [blocks, setBlocks] = useState([]);\n\n\n    const monthStringConversions = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const monthDayConversions = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  \n    const populateDateInfo = async () => {\n      //sets date info state (for header)\n      const now = new Date();\n      const day = now.getDate();\n      const month = now.getMonth();\n      const year = now.getFullYear();\n      setCurrentDateInfo({day, month:monthStringConversions[month], year});\n      //sets date block state (for calendar display)\n      if (userLoggedIn != \"\") {\n        let newDateBlocks = [];\n        for (let i = 1; i <= monthDayConversions[month]; i++) {\n          const fullDate = `${i}/${month+1}/${year}`;\n          let activities = await fetchActivities(fullDate);\n          newDateBlocks.push({\n            id: i,\n            date: fullDate,\n            activities,\n            isToday: i === day\n          });\n        }\n        setBlocks([...blocks, ...newDateBlocks]);\n      }\n    }\n  \n    const fetchActivities = async date => {\n      let response = await fetch(\"http://localhost:8000/getactivities\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ date, username:userLoggedIn })\n      });\n      let data = await response.json();\n      return data;\n    }\n  \n    useEffect(() => {\n      populateDateInfo();\n    }, []);\n\n    return (\n        <>\n            <Header todayInfo={todayInfo}/>\n            <BlockContainer blocks={blocks}/>\n        </>\n    );\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}